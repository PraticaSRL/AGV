<?xml version="1.0" encoding="UTF-8"?>
 <!--####################################################################################################  
     #   PRATICA SRL – www.praticasrl.com                                                                    
     #   Progetto: AGV - Veicolo a guida automatica per movimentazione pallet                                
     #   Progetto cofinanziato dal Fondo POR FESR 14/20 Calabria                                             
     #   Autori:                                                                                             
     #   Duardo Domenico                                                                                     
     #   Chilà Antonino                                                                                      
     #   Scimonelli Mattia                                                                                   
     ####################################################################################################  -->
<launch>
  <!-- Arguments -->
  
  <!-- Uso rtls -->
  <arg name="rtls" default="0"/> 

  <!-- Posizione iniziale ROBOT rispetto map X, Y, Yaw -->  
  <arg name="p_robot_x" default="0.5"/> 
  <arg name="p_robot_y" default="0"/> 
  <arg name="p_robot_a" default="0"/> 

  <!-- Posizione iniziale origine RTLS rispetto map X, Y, Roll (Rotazione attorno asse X) Pitch (Rotazione attorno asse Y) Yaw (Rotazione attorno asse Z) -->  
  <arg name="p_rtls_x" default="0.34092437"/> 
  <arg name="p_rtls_y" default="-1.15142857"/> 
  <arg name="p_rtls_r" default="3.14159"/> 	<!-- Roll - obbligatorio per come è asse X,Y  Sewio - regola mano sinistra, ecc -->
  <arg name="p_rtls_p" default="0.0"/> 		<!-- Pitch -->
  <arg name="p_rtls_w" default="0.0"/> 		<!-- Yaw - Inclinazione asse X rispetto map -->

  <!-- Arguments end -->


  <!-- Avvio del Turtlebot3 e Robot State Publisher -->
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <param name="tb3_model" value="$(arg model)"/>

  <include file="$(find agv)/launch/includes/description.launch.xml">
    <arg name="model" value="$(arg model)" />
  </include>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="use_tf_static" value="false"/>
  </node>

  <!-- Map server -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(find agv)/maps/map_empty.yaml"/>

  <!-- Broadcaster Statico per frame RTLS -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="rtls_to_map" args="$(arg p_rtls_x) $(arg p_rtls_y) 0.0 $(arg p_rtls_w) $(arg p_rtls_p) $(arg p_rtls_r) rtls map" />


  <!-- Move_base -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <rosparam file="$(find agv)/param/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find agv)/param/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find agv)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find agv)/param/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find agv)/param/move_base_params.yaml" command="load" />
    <rosparam file="$(find agv)/param/dwa_local_planner_params_$(arg model).yaml" command="load" />
    <!-- Evito che vada in retromarcia -->
    <!--param name="DWAPlannerROS/min_vel_x" value="0.0"-->
    <remap from="cmd_vel" to="/cmd_vel"/>
    <remap from="odom" to="/odometry/filtered_ok"/>
    <!--<remap from="/set_pose" to="/initialpose"/> -->
  </node>


  <!-- EKF_ODOM -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_odom" clear_params="true">
    <rosparam command="load" file="$(find agv)/params/ekf_odom.yaml" />
    <remap from="odometry/filtered" to="/odometry/filtered_ok"/>
    <remap from="set_pose" to="/set_pose_odom"/>
  </node>


  <!-- EKF_MAP -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
    <rosparam command="load" file="$(find agv)/params/ekf_map.yaml" />
    <!--<remap from="odometry/filtered" to="/odometry/filtered_ok"/>-->
    <remap from="set_pose" to="/set_pose_map"/>
  </node>


  <!-- Esegue nodo inizializzazione posizione robot-->
  <node name="set_pose_init" pkg="agv" type="set_pose_init.py" output="screen">
    <param name="p_robot_x" value="$(arg p_robot_x)"/>
    <param name="p_robot_y" value="$(arg p_robot_y)"/>
    <param name="p_robot_a" value="$(arg p_robot_a)"/>
  </node>

	
  <!-- RVIZ -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find agv)/rviz/TurtleVisualization.rviz"/> 


  <!-- Pubblicazione markers -->
  <node pkg="agv" type="rviz_line" name="rviz_line" output="screen" />


  <group if="$(arg rtls)">
    <!-- Esegue nodo lettura RTLS Sewio -->
    <node name="rtls_sewio" pkg="agv" type="rtls_sewio.py" output="screen" launch-prefix="gnome-terminal -e" />
  </group>


  <!-- Esegue Quadrato -->
  <node name="test_goal" pkg="agv" type="test_goal.py" output="screen" launch-prefix="gnome-terminal -e" />


</launch>
